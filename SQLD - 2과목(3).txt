관리구문

DML(Data Manipulation Language)
 - 데이터의 삽입(INSERT), 수정(UPDATE), 삭제(DELETE), 병합(MERGE)
 - 저장(commit) 혹은 취소(rollback) 반드시 필요

INSERT INTO 테이블 VALUES(값1, 값2 ...);
ex) 
INSERT INTO AA VALUES(1, 'AMERICANO', 1000);

UPDATE 테이블명 SET 수정할컬럼명 = 수정값 WHERE 조건;
ex) AMERICANO의 PRICE을 1500으로 변경
UPDATE AA
SET PRICE = 1500
WHERE NAME = 'AMERICANO';

DELETE[FROM] 테이블명 [WHERE 조건];
ex) 3번 삭제
DELETE AA
WHERE NO = 3;

MERGE
데이터 병합
참조 테이블과 동일하게 맞추는 작업(참조테이블의 데이터 입력, 참조테이블의 값으로 수정 등)
 - INSERT, UPDATE, DELETE 작업을 동시에 수행
문법)
MERGE INTO 테이블명
USING 참조테이블
   ON (연결조건)
 WHEN MATCHED THEN
      UPDATE
         SET 수정할 내용
 WHEN NOT MATCHED THEN
      INSERT VALUES (삽입할 내용)

TCL(Transaction Control Language)
 - 트랜잭션 제어어로 COMMIT, ROLLBACK이 포함됨
 - DML에 의해 조작된 결과를 작업단위(트랜잭션) 별로 제어하는 명령어
 - DML 수행 후 트랜잭션을 정상 종료하지 않는 경우 LOCK 발생할 수 있음

잠금(LOCK)
 - 트랜잭션이 수행하는 동안 특정 데이터에 대해서 다른 트랜잭션이 동시에 접근하지 못하도록 제한
 - 잠금이 걸린 데이터는 잠금을 실행한 트랜잭션만이 접근 및 해제 가능
 
트랜잭션
 - 데이터베이스의 논리적 연산 단위(하나의 연속적인 업무 단위)
 - 분할 할 수 없는 최소의 단위
 - ALL OR NOTHING개념(모두 COMMIT하거나 ROLLBACK 처리해야함)

트랜잭션의 특성
 - 원자성(atomicity)
 - 일관성(consistency)
 - 고립성(isolation)
 - 지속성(durability)

COMMIT
 - 입력, 수정, 삭제한 데이터에 이상이 없을 경우 데이터를 저장하는 명령어
 - 한 번 COMMIT을 수행하면 COMMIT 이전에 수행된 DML은 모두 저장되며 되돌릴 수 없음

ROLLBACK
 - 테이블 내 입력한 데이터나 수정한 데이터, 삭제한 데이터에 대해 변경을 취소하는 명령어
 - 데이터베이스에 저장되지 않고 최종 COMMIT 지점/변경 전/특정 SAVEPOINT 지점으로 원복됨
 - 최종 COMMIT 시점 이전까지 ROLLBACK 가능

DDL(Data Definiton Language)
 - 데이터 정의어
 - 데이터 구조 정의(객체 생성, 삭제, 변경) 언어
 - CREATE(객체 생성), ALTER(객체 변경), DROP(객체 삭제), TRUNCATE(데이터 삭제)
 - AUTO COMMIT(명령어 수행하면 즉시 저장, 원복 불가)

CREATE TABLE [소유자] 테이블명(컬럼1 데이터타입 [DEFAULT 기본값] [제약조건]);

(테이블 복제) 
CREATE TABLE 테이블명
AS
SELECT * FROM 복제 테이블명;

ALTER
 - 테이블 구조 변경
 - 컬럼순서 변경 불가

1. 컬럼 추가
 - 새로 추가된 컬럼위치는 맨 마지막(절대 중간 위치에 추가 불가)
 - 컬럼 추가 시 데이터타입 필수, default값, 제약조건을 명시할 수 있음
 - 여러 컬럼 동시 추가 가능(반드시 괄호 사용)

ALTER TABLE 테이블명 ADD 컬럼명 데이터타입 [DEFAULT] [제약조건];

데이터 타입 변경
 - 빈 컬럼일 경우 데이터 타입 변경 가능
 - CHAR, VARCHAR 타입일 경우 데이터가 있어도 서로 변경 가능

DEFAULT값 변경
 - 특정 컬럼에 값이 생략될 경우(입력 시 언급되지 않을 경우) 자동으로 부여되는 값
 - INSERT 시 DEFAULT 값이 선언된 컬럼에 NULL을 직접 입력할 떄는 DEFAULT값이 아닌 NULL이 입력됨
 - 이미 데이터가 존재하는 테이블에 DEFAULT 값 선언 시 기존 데이터 수정 안됨(이후 입력된 데이터부터 적용)
 - DEFAULT 값 해제 시 DEFAULT 값을 NULL로 선언

컬럼 이름 변경
 - 동시 여러 컬럼 이름 변경 불가(괄호 전달 불가)
ALTER TABLE table_name RENAME COLUMN 기존컬럼명 TO 새 컬럼명;

문법에 컬럼이 들어가면 동시에 여러 개 불가능

컬럼 삭제
 - 데이터 존재 여부와 상관없이 언제나 가능
 - 동시 삭제 불가
ALTER TABLE test DROP COLUMN col_a;

DROP TABLE 테이블명 [PURGE];
PURGE로 테이블 삭제 시 RECYCLEBIN에서 조회 불가

TRUNCATE 
 - 구조 남기고 데이터만 즉시 삭제, 즉시 반영(AUTO COMMIT)
 - RECYCLEBIN에 남지 않음
TRUNCATE TABLE 테이블명;

DELETE / DROP / TRUNCATE 차이
 - DELETE : 데이터 일부 또는 전체 삭제, 롤백 가능
 - TRUNCATE : 데이터 전체 삭제만 가능(일부 삭제 불가), 즉시 반영(롤백 불가)
 - DROP : 데이터와 구조를 동시 삭제, 즉시 반영(롤백 불가)

제약조건
 - 데이터 무결성을 위해 각 컬럼에 생성하는 데이터의 제약 장치
 - 테이블 생성 시 정의 가능, 컬럼 추가 시 정의 가능, 이미 생성된 컬럼에 제약조건만 추가 가능

PRIMARY KEY(기본키)
 - 유일한 식별자(각 행을 구별할 수 있는 식별자 가능)
 - 중복 허용 X, NULL 허용 X => UNIQUE + NOT NULL
 - 특정 컬럼에 PRIMARY KEY 생성하면 NOT NULL 속성 자동 부여(CTAS로 테이블 복사 시 복사되지 X)
 - 하나의 테이블에 여러 기본키를 생성할수 없음
 - 하나의 기본키를 여러 컬럼을 결합하여 생성할 수 있음
 - PRIMARY KEY 생성 시 자동으로 UNIQUE INDEX 생성

문법
1) 테이블 생성 시 제약조건 생성
CREATE TABLE [소유자] 테이블명(
컬럼1 데이터타입 [DEFAULT 기본값] [제약조건],
컬럼2 데이터타입 [DEFAULT 기본값] [제약조건],
...
);

2) 이미 생성된 컬럼에 제약조건만 추가
ALTER TABLE 테이블명 ADD 컬럼명 데이터타입 [DEFAULT 기본값] [제약조건];

3) 이미 생성된 컬럼에 제약조건만 추가
ALTER TABLE 테이블명 ADD [CONSTRAINT 제약조건명] 제약조건종류;

4) 제약조건 삭제
ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건명;

UNIQUE
 - 중복을 허용하지 않음
 - NULL은 허용
예제) UNIQUE KEY가 생성된 컬럼의 값 입력
CREATE TABLE test(
no      NUMBER,
subject VARCHAR2(20) UNIQUE);
값을 입력할 때 NULL은 가능하지만 중복은 안된다.

NOT NULL
 - 이미 만들어진 컬럼에 NOT NULL 선언 시 제약조건 생성이 아닌 컬럼 수정(MODIFY)으로 해
예제) NOT NULL 선언
ALTER TABLE test MODIFY col12 NOT NULL;  =>  컬럼 수정으로 NOT NULL 처리
ALTER TABLE test MODIFY col12 CONSTRAINT pro NOT NULL;  =>  제약조건 이름 부여 가능

FOREIGN KEY
 - 참조테이블의 참조 컬럼에 있는 데이터를 확인하면서 본 테이블 데이터를 관리할 목적으로 생성
 - 반드시 참조(부모)테이블의 참조 컬럼(REFERENCE KEY)이 사전에 PK 혹은 UNIQUE KEY를 가져야 함
문법
CREATE TABLE 테이블명(
컬럼1     데이터타입   [DEFAULT 값] REFERENCES 참조테이블(참조키),
...
);

FOREIGN KEY 옵션(생성 시 정의, 변경 불가 -> 재생성)
1. ON DELETE CASCADE : 부모 데이터 삭제 시 자식 데이터 함께 삭제
2. ON DELETE SET NULL : 부모 데이터 삭제 시 데이터의 참조값은 NULL로 수정

뷰(VIEW)
 - 저장공간을 가지지는 않지만 테이블처럼 조회 및 수정할 수 있는 객체

뷰의 종류
 - 단순뷰 : 하나의 테이블 조회 뷰
 - 복합뷰 : 둘 이상의 테이블 조인 뷰

문법
CREATE [OR REPLACE] VIEW 뷰이름
AS
조회쿼리;

뷰의 삭제
DROP VIEW 뷰명;

시퀀스(SEQUENCE)
 - 자동으로 연속적인 숫자 뷰여해주는 객
문법
CREATE SEQUENCE 시퀀스명
INCREMENT BY       -- 증가값(DEFAULT : 1)
START WITH         -- 시작값(DEFAULT : 1)
MAXVALUE           -- 마지막값(증가시퀀스), 재사용시 시작값(감소시퀀스)
MINVALUE           -- 재사용시 시작값(증가시퀀스), 마지막값(감소시퀀스)
CYCLE | NOCYCLE    -- 시퀀스 번호 재사용(DEFAULT : NOCYCLE)
CACHE N            -- 캐시값(DEFAULT : 20)    =>   메모리에 미리 올려놓는 값
;

시노님(SYNONYM)
 - 테이블 별칭 생성
문법
CREATE [OR REPLACE] [PUBLIC] DYNONYM 별칭 FOR 테이블명;

ex) HR 계정에서 SCOTT.EMP를 EMP로 조회하는 방법
CREATE SYNONYM EMP FOR SCOTT.EMP;

DCL(Data Control Language)
 - 데이터 제어어로 객체에 대한 권한을 부여(GRANT)하거나 회수(REVOKE)하는 기능
 - 테이블 소유자는 타계정에 테이블 조회 및 수정 권한 부여 및 회수 가능

권한 종류
1) 오브젝트 권한
 - 테이블에 대한 권한 제어
  ex) 특정 테이블에 대한 SELECT, INSERT, UPDATE, DELETE, MERGE 권한
2) 시스템 권한
 - 시스템 작업(테이블생성 등) 등을 제어
  ex) 테이블 생성 권한, 인덱스 삭제 권한
 - 관리자 권한만 권한 부여 및 회수 가능

GRANT
 - 동시에 여러 유저에 대한 권한 부여 가능
 - 동시 여러 권한 부여 가능
문법
GRANT 권한 ON 테이블명 TO 유저;

REVOKE
 - 동시 여러 권한 회수 가능
 - 동시 여러 유저로부터의 권한 회수 가능
문법
REVOKE 권한 ON 테이블명 FROM 유저;

롤(ROLE)
 - 권한의 묶음(생성 가능한 객체)
 문법
CREATE ROLE 롤이름;









































