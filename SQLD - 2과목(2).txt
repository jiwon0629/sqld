서브 쿼리 종류
1. 동작하는 방식에 따라
1) UN-CORRELATED(비연관) 서브쿼리
   - 서브 쿼리가 메인쿼리 컬럼을 가지고 있지 않은 형태의 서브쿼리
   - 메인쿼리에 서브쿼리가 실행된 결과 값을 제공하기 위한 목적으로 사용
2) CORRELATED(연관) 서브쿼리
   - 서브쿼리가 메인쿼리 컬럼을 가지고 있는 형태의 서브쿼리
   - 일반적으로 메인쿼리가 먼저 수행된 후에 서브쿼리에서 조건이 맞는지 확인하고자 할 때 사용

2. 위치에 따라
1) 스칼라 서브쿼리
  - SELECT에 사용하는 서브쿼리
  - 서브쿼리 결과를 마치 하나의 컬럼처럼 사용하기 위해 주로 사용
2) 인라인뷰
  - FROM절에 사용하는 서브쿼리
  - 서브쿼리 결과를 테이블처럼 사용하기 위해 주로 사용

3) WHERE절 서브쿼리
  - 가장 일반적인 서브쿼리
  - 비교 상수 자리에 값을 전달하기 위한 목적으로 주로 사용(상수항을 대체)

WHERE절 서브쿼리 종류
1) 단일행 서브쿼리
  - 서브쿼리 결과가 1개의 행이 리턴되는 형태

2) 다중행 서브쿼리
  - 서브쿼리 결과가 여러 행이 리턴되는 형태

다중행 서브쿼리 연산자
IN : 같은 값을 찾음
> ANY : 최소값을 반환함
< ANY : 최대값을 반환함
< ALL : 최소값을 반환함
> ALL : 최대값을 반환함

인라인뷰(Inline View)
 - 쿼리 안의 뷰의 형태로 테이블처럼 조회할 데이터를 정의하기 위해 사용

WINDOW FUNCTION
 - 서로 다른 행의 비교나 연산을 위해 만든 함수
 - GROUP BY를 쓰지 않고 그룹 연산 가능
 - LAG, LEAD, SUM, AVG, MIN, MAX, COUNT, RANK

PARTITION BY절 : 출력할 총 데이터 수 변화 없이 그룹연산 수행할 GROUP BY 컬럼

1. ROWS, RANGE 차이
1) ROWS : 값이 같더라도 각 행씩 연산
2) RANGE : 같은 값의 경우 하나의 RANGE로 묶어서 동시 연산(DEFAULT)

2. BETWEEN A AND B
A) 시작점 정의 
 - CURRENT ROW : 현재행부터
 - UNBOUNDED PRECEDING : 처음부터(DEFAULT)
 - N PRECEDING : N 이전부터

B) 마지막 시점 정의 
 - CURRENT ROW : 현재행부까지(DEFALUT)
 - UNBOUNDED FOLLOWING : 마지막까지
 - N FOLLOWING : N 이후까지

UNION : 합집합
INTERSECT : 교집합
MINUS : 차집합

VARIANCE / STDDEV
 - 평균과 표준편차
 - 표준편차는 평균값의 루트값

GROUP BY FUNCTIOIN
 - GROUP BY절에 사용하는 함수
 - 여러 GROUP BY결과를 동시에 출력(합집합)하는 기능
 - GROUP BY기능 : 그룹별 연산값만 출력되므로 전체 소계와 함께 출력될 수 없음

순위 관련 함수
1) RANK(순위)
 RANK WITHIN GROUP
  - 특정값에 대한 순위 확인
  - 윈도우함수가 아닌 일반함수

2) RANK() OVER()
 - 전체 중/특정 그룹 중 값의 순위 확인 
 - ORDER BY절 필수

3) DENSE_RANK
 - 누적순위
 - 값이 같을 때 동일한 순위 부여 후 다음 순위가 바로 이어지는 순위 부여 방식

4) ROW NUMBER
 - 연속된 행 번호
 - 동일한 순위를 인정하지 않고 단순히 순서대로 나열한대로의 순서 값 리턴

LAG, LEAD
 - 행 순서대로 각각 이전 값(LAG), 이후 값(LEAD) 가져오기
 - ORDER BY절 필수

FIRST_VALUE, LAST_VALUE
 - 정렬 순서대로 정해진 범위에서의 처음 값, 마지막 값 출력
 - 순서와 범위 정의에 따라 최솟값과 최댓값 리턴 가능

NTILE
 - 행을 특정 컬럼 순서에 따라 정해진 수의 그룹으로 나누기 위함 함수
 - 그룹 번호가 리턴됨
 - ORDER BY 필수
 - PARTITION BY를 사용하여 특정 그룹을 또 원하는 수 만큼 그룹 분리 가능

비율관련 함수
1) RATIO_TO_REPORT
 - 각 값의 비율 리턴(전체 비율 또는 특정 그룹 내 비율 가능)
 - ORDER BY 사용불가

2) CUME_DIST
 - 각 값의 누적 비율 리턴(전체 비율 또는 특정 그룹 내 비율 가능)
 - ORDER BY 필수(누적비율을 구하는 순서 정할 수 있음)

3) PERCENT_RANK
 - PERCENTILE(분위수) 출력
 - 전체 COUNT 중 상대적 위치 출력(0 ~ 1 범위 내0
 - ORDER BY 필수

TOP N QUERY
 - 페이징 처리를 효과적으로 수행하기 위해 사용
 - 전체 결과에서 특정 N 개 추출
  예) 성적 상위자 3명

TOP-N 행 추출 방법
1. ROWNUM
2. RANK
3. FETCH

ROWNUM 
 - 출력된 데이터 기준으로 행 번호 부여
 - 절대적인 행 번호가 아닌 가상의 번호이므로 특정 행을 지정할 수 없음(=연산 불가)
 - 첫번째 행이 증가한 이후 할당되므로 '>' 연산 사용 불가(0은 가능)

FETCH
 - 출력될 행의 수를 제한하는 절
 - ORDER BY절 뒤에 위치

 - OFFSET : 건너뛸 행의 수
   ex) 성적 높은 순 1등 제외, 나머지 3명
 - N : 출력할 행의 수
 - FETCH : 출력할 행의 수를 전달하는 구문
 - FIRST : OFFSET을 쓰지 않았을 때 처음부터 N행 출력 명령
 - NEXT : OFFSET을 사용했을 경우 제외한 행 다음부터 N 행 출력 명령
 - ROW | ROWS : 행의 수에 따라 하나일 경우 단수, 여러값이면 복수형

계층형 질의
 - 하나의 테이블 내 각 행끼리 관계를 가질 때, 연결고리를 통해 행과 행 사이의 계층(depth)을 표현하는 기법
 - PRIOR의 위치에 따라 연결하는 데이터가 달라짐
 - START WITH : 데이터를 출력할 시작 지정하는 조건
 - CONNECT BY PRIOR : 행을 이어나갈 조건

계층형 질의 가상 컬럼
1) LEVEL : 각 DEPTH를 표현(시작점부터 1)
2) CONNECT_BY_ISLEAF : LEAF NODE(최하위 노드) 여부(참 : 1, 거짓 : 0)

계층별 질의 가상 함수
1) CONNECT_BY_ROOT 컬럼명 : 루트노드의 해당 컬럼명의 값이 출력
2) SYS_CONECT_BY_PATH(컬럼, 구분자) : 이어지는 경로 출력
3) ORDER SIBLINGS BY 컬럼: 같은 LEVEL일 경우 정렬 수행

PIVOT과 UNPIVOT
(데이터의 구조를 변경하는 기능)

데이터의 구조
1) LONG DATA(Tidy data)
 - 하나의 속성이 하나의 컬럼으로 정의되어 값들이 여러 행으로 쌓이는 구조
 - RDBMS의 테이블 설계 방식
 - 다른 테이블과의 조인 연산이 가능한 구조

2) WIDE DATA(Cross table)
 - 행과 컬럼에 유의미한 정보 전달을 목적으로 작성하는 교차표
 - 하나의 속성값이 여러 컬럼으로 분리되어 표현

데이터 구조 변경
1) PIVOT : LONG -> WIDE
2) UNPIVOT : WIDE -> LONG

PIVOT
 - 교차표를 만드는 기능
 - STACK 컬럼, UNSTACK 컬럼, VALUE 컬럼의 정의가 중요
 - FROM절에 STACK, UNSTACK, VALUE 컬럼명만 정의 필요
 - PIVOT절에 UNSTACK, VALUE 컬럼명 정의
 - PIVOT절 IN 연산자에 UNSTACK 컬럼 값을 정의
 - FROM절에 선언된 컬럼 중 PIVOT절에서 선언한 VALUE컬럼, UNSTACK컬럼을 제외한 모든 컬럼은 STACK 컬럼이 됨

UNPIVOT
 - WIDE 데이터를 LONG 데이터로 변경하는 문법
 - STACK 컬럼 : 이미 UNSTACK 되어 있는 여러 컬럼을 하나의 컬럼으로 STACK 시 새로 만들 컬럼이름(사용자 정의)
 - VALUE 컬럼 : 교차표에서 셀 자리(VALUE)값을 하나의 컬럼으로 표현하고자 할 때 새로 만들 컬럼명(사용자 정의)
 - 값 1, 값 2... : 실제 UNSTACK 되어 있는 컬럼이름들








