2과목

SQL(Structured Query Language)
관계형 데이터베이스에서 데이터 조회 및 조작, DBMS 시스템 관리 기능을 명령하는 언어
데어터 정의(DDL), 데이터 조작(DML), 데이터 제어 언어(DCL) 등으로 구분

데이터 무결성(Integrity)
 - 데이터의 정확성과 일관성을 유지하고, 데이터에 결손과 부정함이 없음을 보증하는 것
 - 데이터베이스에 저장된 값과 그것이 표현하는 현실의 비즈니스 모델의 값이 일치하는 정확성을 의미함
 - 데이터 무결성을 유지하는 것이 데이터베이스 관리 시스템에 중요한 기능

데이터 무결성 종류
1. 개체 무결성 : 테이블의 기본키를 구성하는 컬럼(속성)은 NULL 값이나 중복값을 가질 수 없음
2. 참조 무결성 : 외래키 값은 NULL이거나 참조 테이블의 기본키 값과 동일해야 한다.
(외래키란 참조 테이블의 기본키에 정의된 데이터만 허용되는 구조)
3. 도메인 무결성 : 주어진 속성 값이 정의된 도메인에 속한 값이어야 함
4. NULL 무결성 : 특정 속성에 대해 NULL을 허용하지 않는 특징
5. 고유 무결성 : 특정 속성에 대해 값이 중복되지 않는 특징
6. 키 무결성 : 하나의 릴레이션(관계)에는 적어도 하나의 키가 존재해야 함
(테이블이 서로 관계를 가질 경우 반드시 하나 이상의 조인키를 가짐)

도메인 : 각 컬럼(속성)이 갖는 범위
릴레이션 : 테이블간 관계를 말함
튜플 : 하나의 행을 의미함
키 : 식별자

ERD(Entity Relationship Diagram)
 - 테이블 간 서로의 상관 관계를 그림으로 표현할 것
 - ERD의 구성요소에는 엔터티(Entity), 관계(Relationship), 속성(Attribute)이 있다

DDL(Data Definition Language)
 - CREATE, ALTER, DROP, TRUNCATE
DML(Data Manipulation Language)
 - INSERT, DELETE, UPDATE, MERGE
DCL(Data Control Language)
 - GRANT, REVOKE
TCL(Transaction Control Language)
 - COMMIT, ROLLBACK
DQL(Data Query Language)
 - SELECT

SELECT문 구조
 - SELECT 문은 6개 절로 구성
 - 각 절의 순서대로 작성해야 함(GROUP BY 와 HAVING은 서로 바꿀 수 있지만 보통 사용하지 않음)
 - SELECT문의 내부 파싱(문법적 해석) 순서는 나열된 순서와는 다름
 - FROM > WHERE > GROUOP BY > HAVING > SELECT > ORDER BY 순서대로 실행됨
SQL)
SELECT * | 컬럼명 | 표현식
FROM 테이블명 또는 뷰명
WHERE 조회 조건
GROUP BY 그룹명 컬럼명
HAVING 그룹명 필터링 조건
ORDER BY 정렬컬럼명

SELECT 절
 - SELECT 문장을 사용하여 불러올 컬럼명, 연산 결과를 작성하는 절
 - *를 사용하여 테이블 내 전체 컬럼명을 불러올 수 있음
 - 원하는 컬럼을 ,로 나열하여 작성 가능(순서대로 출력됨)
 - 표현식이란 원래의 컬럼명을 제외한 모든 표현 가능한 대상(연산식, 기존 컬럼의 함수 변형식 포함)

특징
SELECT 절에서 표시할 대상 컬럼에 Alias(별칭) 지정 가능
대소문자를 구분하지 않아도 인식한다.

컬럼 Alias(별칭)
 - 컬럼명 대신 출력할 임시 이름 지정(SELECT 절에서만 정의 가능, 원본 컬럼명은 변경되지 X)
 - 컬럼명 뒤에 AS와 함께 컬림 별칭 전달(AS는 생략 가능)

특징 및 주의사항
 - SELECT 문보다 늦게 수행되는 ORDER BY절에서만 컬림 별칭 사용 가능(그 외 절에서 사용시 에러 발생)
 - 한글 사용 가능
 - 이미 존재하는 예약어는 별칭으로 사용 불가
   ex) avg, count, decode, SELECT, FROM 등

다음의 경우 별칭에 반드시 쌍따옴표 전달 필요
 - 별칭에 공백을 포함하는 경우
 - 별칭에 특수문자를 포함하는 경우 ("_" 제외)
 - 별칭 그대로 전달할 경우(입력한 대소를 그대로 출력하고자 할 때)

FROM절
 - 데이터를 불러올 테이블명 또는 뷰명 전달
 - 테이블 여러 개 전달 가능( , 로 구분) -> 조인 조건 없이 테이블명만 나열 시 카티시안 곱 발생 주의
 - 테이블 별칭 선언 가능(AS 쓰지 않음)
   * 테이블 별칭 선언 시 컬럼 구분자는 테이블 별칭으로만 전달(테이블명으로 사용 시 에러 발생)
 - ORACLE 에서는 FROM 절 생략 불가(의미상 필요 없는 경우 DUAL 테이블 선언)
   * ORACLE 23c 버전부터는 생략 가능
 - MSSQL 에서는 FROM절 필요 없는 경우 생략 가능(오늘 날짜 조회 시)

뷰 : 테이블과 동일하게 데이터를 조회할 수 있는 객체이지만 테이블처럼 실제 데이터가 저장된 것이 아닌,
     SELECT문 결과에 이름을 붙여 그 이름만으로 조회가 가능하도록 한 기능

함수 정의
 - input value가 있을 경우 그에 맞는 output value를 출력해주는 객체
 - input value와 output value의 관계를 정의한 객체
 - from 절을 제외한 모든 절에서 사용 가능

함수 기능
 - 기본적인 쿼리문을 더욱 강력하게 해줌
 - 데이터의 계산을 수행
 - 개별 데이터의 항목을 수정
 - 표시할 날짜 및 숫자 형식을 지정
 - 열 데이터의 유형(data type)을 변환

함수의 종류(입력값의 수에 따라)
 - 단일행 함수와 복수행 함수로 구분
 - 단일행 함수 : input과 output의 관계가 1:1
 - 복수행 함수 : 여러 건의 데이터를 동시에 입력 받아서 하나의 요약값을 리턴
                (그룹함수 또는 집계함수라고 함)

일반함수
 - 기타 함수(널 치환 함수 등)
종류
DECODE(대상, 값1, 리턴1, 값2, 리턴2 ..., 그외리턴)
 - 대상이 값1이면 리턴1, 값2와 같으면 리턴2
NVL(대상, 치환값)
 - 대상이 널이면 치환값으로 치환하여 리턴
NVL2(대상, 치환값1, 치환값2)
 - 대상이 널이면 치환값2로 치환, 널이 아니면 치환값1로 치환하여 리턴
COALESCE(대상1, 대상2, ...그외리턴)
 - 대상1이 널이면 대상2, 대상2가 널이면 대상3, 모두가 널이면 그외리턴값이 리턴됨
CASE문
 - 조건별 치환 및 연산 수행
 - 항상 마지막은 END로 마무리해줘야함

WHERE절
 - 테이블의 데이터 중 원하는 조건에 맞는 데이터만 조회하고 싶을 경우 사용
 - 여러 조건 동시 전달 가능
 - NULL 조회 시 IS NULL/IS NOT NULL 연산자 사용( = 연산자로 조회 불가)

연산자 종류
BETWEEN a AND b : A 와 B 사이에 있는 범위 값을 모두 검색
IN(a, b, c) : A이거나 B이거나 C인 조건을 검색
LIKE : 특정 패턴을 가지고 있는 조건을 검색
Is Null / Is Not Null : Null 값을 검색 / Null 이 아닌 값을 검색
A AND B : A 조건과 B 조건을 모두 만족하는 값만 검색
A OR B : A 조건이나 B 조건 중 한가지라도 만족하는 값을 검색
NOT A : A가 아닌 모든 조건을 검색(여집합)

GROUP BY절
 - 각 행을 특정 조건에 따라 그룹으로 분리하여 계산하도록 하는 구문식
 - 그룹에 대한 조건은 WHERE절에서 사용할 수 없음
 - GROUP BY절을 사용하면 데이터가 요약되므로 요약되기 전 데이터와 함께 출력할 수 없음

HAVING절
 - 그룹 함수 결과를 조건으로 사용할 때 사용하는 절

ORDER BY 
 - 데이터는 입력된 순서대로 출력되나, 출력되는 행의 순서를 사용자가 변경하고자 할 때 ORDER BY절을 사용
 - ORDER BY 뒤에 명시된 컬럼 순서대로 정렬
 - 정렬 순서를 오름차순(ASC), 내림차순(DESC)으로 전달

정렬 순서(오름차순)
 - 한글 : 가, 나, 다, 라 ...
 - 영어 : A, B, C, D ...

































