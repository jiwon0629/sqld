1. 다음은 어떤 데이터모델링에 대한 설명인가?
추상화 수준이 높고 업무 중심적이고 포괄적인 수준의 모델링 진행. 전사적 데이터 모델링
1. 논리적 데이터 모델링
2. 물리적 데이터 모델링
3. 개괄적 데이터 모델링
4. 개념적 데이터 모델링
답 : 4번

2. 다음중 엔터티의 특징이 아닌 것은?(/)
1. 반드시 해당 업무에서 필요하고 관리되어야 하는 정보이어야 한다.
2. 유일한 식별자에 의해 식별이 가능해야 한다.
3. 엔터티는 반드시 속성이 있어야 한다.
4. 정규화 이론에 근간하여 정해진 주식별자는 함수적 종속성을 가져야 한다.
답 : 4번

3. 속성의 분류 중 속성의 특성에 따른 분류가 아닌 것은?
1. 기본속성
2. 파생속성
3. 일반속성
4. 설계속성
답 : 3번
해설) 일반속성은 구성 방식에 따른 분류이다. (PK, FK, 일반)

4. 아래 ERD에 대한 설명으로 가장 적절하지 않은 것은?
고객[고객번호(PK), 이름, 성별, 전화번호]
서비스구매[고객번호(FK), 서비스번호(FK), 이용날짜]
서비스[서비스번호(PK), 서비스명, 가격]
1. 한 명의 고객은 여러 개의 서비스를 구매할 수 있다.
2. 한 명의 고객은 서비스를 구매하지 않을 수 있다.
3. 하나의 서비스 구매는 반드시 한 명의 고객에 의해 주문된다.
4. 하나의 서비스 구매 이력은 고객 정보가 없을 수 있다.
답 : 4번

5. 다음은 식별자의 특징 중 무엇을 설명하고 있는가?
사원번호 없는 회사직원은 있을 수 없음
1. 유일성
2. 최소성
3. 불변성
4. 존재성
답 : 4번

6. 다음 엔터티를 제 3차 정규화를 수행했을 때 도출되는 엔터티의 수는?(도서대출 포함)(/) 이해 불가
(단, 하나의 대출자에 대해 하나의 대출번호로 여러 도서를 대출/반납할 수 있다고 가정)
도서대출[대출번호(PK), 대출자번호(FK), 대출자명, 대출자직업, 대출일자, 대출도서번호, 대출도서명, 출판사명, 출판년월, 대표저자명, 반납일자]
1. 1
2. 2
3. 3
4. 4
답 : 3번
해설) 3차 정규화는 이행적 종속 관계를 없애는 과정 A -> B -> C를 A -> B, B -> C로 나눈다.
대출번호와 대출자번호, 대출자명, 대출자직업  

7. 관계에 대한 설명으로 가장 적절하지 않은 것은?
회원은 반드시 개인회원 또는 법인회원으로 회원가입을 한다.
회원 가입 후 개인회원 또는 법인회원으로 로그인하여 서비스를 이용할 수 있다.
1. 관계는 존재적 관계와 행위에 의한 관계로 나누어 볼 수 있다.
2. 부서와 사원 엔터티 간의 '소속' 관계는 존재적 관계이다.
3. 고객과 주문내역 엔터티 간의 '주문' 관계는 행위에 의한 관계이다.
4. 개인회원 또는 법인회원 둘 중 하나로 주문 가능할 경우 고객과 주문 엔터티는 상호포함적 관계이다.
답 : 4번
해설) 상호베타적 관계이다.

8. 트랜잭션의 특징 중 보기는 무엇을 설명하고 있는가?
트랜잭션이 실행되기 전의 데이터베이스 내용이 잘못 되어 있지 않다면
트랜잭션이 실행된 이후에도 데이터베이스의 내용에 잘못이 있으면 안된다.
1. 원자성
2. 일관성
3. 고립성
4. 지속성
답 : 2번

9. NULL에 대한 설명으로 가장 적절하지 않은 것은?
1. 정해지지 않은 값을 의미한다.
2. NULL과의 모든 비교(IS NULL 제외)는 알 수 없음을 반환한다.
3. NULL로만 구성된 컬럼을 COUNT한 결과는 공집합이다.
4. 공백문자 혹은 숫자 0과는 다른 의미를 갖는다.
답 : 3번

10. 다음 식별자에 대한 설명으로 가장 적절한 것은?
엔터티 내의 여러 인스턴스 중 하나를 유일하게 구분할 수 있으나, 대표성을 가지지 못하는 식별자
1. 보조 식별자
2. 인조 식별자
3. 본질 식별자
4. 복합 식별자
답 : 1번

11. SELECT 문에 대한 설명으로 가장 적절하지 않은 것은?(/)
1. HAVING절은 GROUP BY절 위에 명시할 수 있다.
2. ORDER BY절은 문법 순서도 맨 마지막에 위치하며, 실행 순서 역시 마지막이다.
3. FROM 절은 모든 DBMS에서 생략 가능하다.
4. SELECT절에 DISTINCT는 항상 SELECT 바로 뒤에 위치한다.
답 : 3번

12. SQL의 종류와 해당되는 명령어를 연결한 것 중 틀린 것은?
1. DML - TRUNCATE
2. TCL - COMMIT
3. DCL - GRANT
4. DDL - ALTER
답 : 1번
해설) TRUNCATE는 DDL이다.

13. SQL문을 실행했을 때 오류가 발생하는 부분으로 가장 적절한 것은?(/)
1. SELECT DEPTNO, ROUND(AVG(SAL)) AS ROUND_VALUE
2. FROM EMP E
3. WHERE ROUND_VALUE >=2000
4. GROUP BY DEPTNO;
답 : 3번

14. 다음의 함수 실행 결과 중 틀린 것은?
1. SUBSTR('WWW.HDATALAB.CO.KR' , -5) : 'CO.KR'
2. LPAD('X', 5, 'X') : 'XXXXXX'
3. INSTR('WWW.HDATALAB.CO.KR', '.', 5, 2) : 16
4. LTRIM('ABABAA', 'A') : 'BABAA'
답 : 2번
해설) INSTR은 위치 찾기 5번째부터 .의 2번째 위치 찾기 16번째
LTRIM은 왼쪽부터 A를 제거하다가 A가 아니면 멈춤

15. 함수의 실행 결과로 적절하지 않은 것은?
1. CEIL(3.5) : 4
2. FLOOR(3.5) : 3
3. ROUND(12345.678, -2) : 12350
4. SIGN(120) : 1
답 : 3번
해설) ROUND(12345.678, -2)는 12345.678에서 -2번째 4의 위치에서 반올림을 하면 12300이다.
SIGN(120)은 양수이니까 1

16. 함수의 실행 결과 중 다른 하나는?(/)
COMM[NULL, 500]
1. NVL(COMM, 100)
2. NULLIF(COMM, 100)
3. COALESCE(COMM, 100)
4. ISNULL(COMM, 100)
답 : 2번
해설) ISNULL은 COMM이 NULL이면 100을 반환하고 아니면 그 수를 반환한다.
COALESCE(COMM, 100)은 COMM이 NULL이면 그 다음 수 반환

17. 다음 쿼리의 실행 결과로 알맞은 것은?(/)
TAB1테이블 SAL[3000, 3500, 4000, 4200, 6000]
SQL문
SELECT SUM(DECODE(SIGN(SAL-4000), 1, 1, 0))
FROM TAB1;
1. 0
2. 1
3. 2
4. 3
답 : 3번

18. 다음 SQL 중 실행 결과가 다른 것은?
TAB1테이블 JUMIN(CHAR(13))[9012231223456, 9606272349076]
1. SELECT DECODE(SUBSTR(JUMIN, 7, 1), '1', '남자', '여자') FROM TAB1;
2. SELECT CASE WHEN SUBSTR(JUMIN, 7, 1) = 1 THEN '남자' ELSE '여자' END FROM TAB1;
3. SELECT CASE SUBSTR(JUMIN, 7, 1) WHEN 1 THEN '남자' ELSE '여자' END FROM TAB1;
4. SELECT CASE SUBSTR(JUMIN, 7, 1) WHEN '1' THEN '남자' ELSE '여자' END FROM TAB1;
답 : 3번

19. 아래 SQL의 실행 결과로 가장 적절한 것은? (단, DBMS는 ORACLE로 가정)(/)
SQL문
SELECT TO_CHAR(TO_DATE('2024/08/24 10:00', 'YYYY/MM/DD HH24:MI')
      -30/24/60, 'YYYY.MM.DD HH24:MI:SS')
FROM DUAL;
1. 2024.07.25 10:00:00
2. 2024.08.24 06:00:00
3. 2024.08.24 09:30:00
4. 2024.08.24 09:59:30
답 : 3번
해설) -30/24/60은 30 * 1 / 24 / 60 -> 1일을 24시간으로 나누고 시간을 60분으로 나눠서 30분이 된다.
2024/08/24 10:00 -30분 -> 2024/08/24 09:30:00

20. 다음 중 SQL 중 실행 결과가 다른 것은?(/)
1. SELECT JOB,
COUNT(CASE WHEN DEPTNO = 10 THEN 1 ELSE 0 END) AS "10번 부서 원수",
COUNT(CASE WHEN DEPTNO = 20 THEN 1 ELSE 0 END) AS "20번 부서 원수",
COUNT(CASE WHEN DEPTNO = 30 THEN 1 ELSE 0 END) AS "30번 부서 원수",
FROM EMP
GROUP BY JOB;
2. SELECT JOB,
COUNT(CASE WHEN DEPTNO = 10 THEN 1 END) AS "10번 부서 원수",
COUNT(CASE WHEN DEPTNO = 20 THEN 1 END) AS "20번 부서 원수",
COUNT(CASE WHEN DEPTNO = 30 THEN 1 END) AS "30번 부서 원수",
FROM EMP
GROUP BY JOB;
3. SELECT JOB,
SUM(CASE WHEN DEPTNO = 10 THEN 1 ELSE 0 END) AS "10번 부서 원수",
SUM(CASE WHEN DEPTNO = 20 THEN 1 ELSE 0 END) AS "20번 부서 원수",
SUM(CASE WHEN DEPTNO = 30 THEN 1 ELSE 0 END) AS "30번 부서 원수",
FROM EMP
GROUP BY JOB;
4. SELECT JOB,
NVL(SUM(CASE WHEN DEPTNO = 10 THEN 1 END),0) AS "10번 부서 원수",
NVL(SUM(CASE WHEN DEPTNO = 20 THEN 1 END),0)AS "20번 부서 원수",
NVL(SUM(CASE WHEN DEPTNO = 30 THEN 1 END),0) AS "30번 부서 원수",
FROM EMP
GROUP BY JOB;
답 : 1번

21. 다음 SQL 수행 결과로 알맞은 것은?(/)
TAB1테이블 CODE[A1C1, A2C2, B1A0, B2C1, C1A1, D1B2]
SELECT COUNT(CODE) 
FROM TAB1
WHERE CODE LIKE '_1%'
OR CODE LIKE '%A%';
1. 4
2. 5
3. 7
4. 8
답 : 2번
해설) CODE LIKE '_1%' -> A1C1, B1A0, C1A1, D1B2
CODE LIKE '%A%' -> A1C1, A2C2, B1A0, C1A1
OR조건은 합집합에서 교집합을 빼야한다.
4 + 4 - 3 = 5

22. 다음 SQL 문장 중 실행 결과가 다른 하나는?(/)
1. SELECT COUNT(*) FROM EMP WHERE DEPTNO = 10 OR DEPTNO = 20 AND JOB = 'CLERK';
2. SELECT COUNT(*) FROM EMP WHERE (DEPTNO = 10 OR DEPTNO = 20) AND JOB = 'CLERK';
3. SELECT COUNT(*) FROM EMP WHERE DEPTNO = 10 OR (DEPTNO = 20 AND JOB = 'CLERK');
4. SELECT COUNT(*) FROM EMP WHERE (DEPTNO = 10 OR DEPTNO = 20 AND JOB = 'CLERK')
답 : 2번
해설) 연산 순서는 NOT - AND - OR이므로 AND가 먼저 연산된다.

23. 아래 SQL 수행 결과로 가장 적절한 것은?(/)
TAB1테이블 COL1[100, NULL, 0], COL2[NULL, 200, 300], COL3[100, 400, NULL]
SELECT SUM(COL2) + SUM(COL3) FROM TAB1;
SELECT SUM(COL2) + SUM(COL3) FROM TAB1 WHERE COL1 > 0;
SELECT SUM(COL2) + SUM(COL3) FROM TAB1 WHERE COL1 IS NOT NULL;
SELECT SUM(COL2) + SUM(COL3) FROM TAB1 WHERE COL1 IS NULL;
1. 500, 100, 400, 600
2. 500, NULL, 400, 600
3. 1000, 100, 400, 600
4. 1000, NULL, 400, 600
답 : 4번

24. 다음 중 GROUP BY 절 대한 설명 중 틀린 것은?(/)
1. GROUP BY절에는 컬럼 별칭을 사용할 수 없다.
2. GROUP BY절에는 그룹함수를 사용할 수 없다.
3. GROUP BY절에 명시되지 않은 컬럼을 그룹함수 없이 SELECT절에 사용할 수 없다.
4. GROUP BY절에 나열되는 컬럼 순서에 따라 SELECT절의 그룹함수의 연산 결과가 달라질 수 있다.
답 : 4번

25. 아래 SQL 수행 결과로 가장 적절한 것은?
TAB1테이블 COL1[100, NULL, 0], COL2[NULL, 200, 300], COL3[100, 400, NULL]
SELECT COUNT(*) AS RESULT FROM TAB1 WHERE COL1 = 200 CROUP BY COL1;
SELECT SUM(COL2) AS RESULT FROM TAB1 WHERE COL1 = 100;
SELECT COUNT(COL1) AS RESULT FROM TAB1 WHERE COL3 = 400;
1. 0, 0, 0
2. _, _, 0
3.  , , _
4.  , _, 0
답 : 4번

26. 다음 중 실행이 불가한 구문은?
1. SELECT COL1, COL2, COL3 C1
FROM TAB1 T
ORDER BY 1, COL2, COL3;
2. SELECT COL1, COL2, COL3 C1
FROM TAB1 T
ORDER BY 1, 2, 3;
3. SELECT COL1, COL2, COL3 C1
FROM TAB1 T
ORDER BY 1, COL2, C1;
4. SELECT COL1, COL2, COL3 C1
FROM TAB1 T
ORDER BY COL1, COL1, T.C1;
답 : 4번

27. 다음 SQL 구문의 실행 결과로 가장 적절한 것은?
TAB1테이블 SAL[1300, 800, 2500, 300]
SELECT SAL FROM TAB1 ORDER BY TO_CHAR(SAL);
1. 1300 2500 300 800
2. 300 800 1300 2500
3. 300 1300 800 2500
4. 2500 1300 800 300
답 : 1번
해설) 숫자를 TO_CHAR하면 앞자리에서부터 숫자가 큰 것이 뒤로 간다.

28. 아래의 SQL의 결과로 알맞은 것은?
TAB1테이블 COL1[1,2,3,4], COL2[A, _, B, C]
TAB2테이블 COL1[1,2,3], COL2[A, _, B]
SELECT SUM(A.COL1) FROM TAB1 A, TAB2 B WHERE A.COL2 <> B.COL2;
1. 8
2. 10
3. 12
4. 30
답 : 3번
해설) TAB1의 1 A와 TAB2의 3  B
TAB1의 3 B와 TAB2의 1  A
TAB1의 4 C와 TAB2의 1  A
TAB1의 4 C와 TAB2의 3  B
NULL은 비교할 수 없으니 아예 제외한다.

29. 아래 SQL 실행 결과로 알맞은 것은?
TAB1테이블 EMPNO[1000,2000,3000,4000], NAME[SCOTT, SMITH, FORD, TIGER]
TAB2테이블 NO[1,2], RULE_NAME[%O%, F%]
1. 0
2. 1
3. 2
4. 3
답 : 4번

30. 아래와 같은 테이블 TAB1, TAB2가 있을 때 아래의 SQL의 결과 건수를 알맞게 나열한 것은?
TAB1테이블 COL1[A, B, C, NULL], COL2[100, 200, 300, 400], KEY1[BB, CC, DD, EE]
TAB2테이블 COL1[A, B, C, NULL], COL2[100, 200, 300, 400], KEY2[AA, BB, BBD, EE]
SELECT * FROM TAB1 A INNER JOIN TAB2 B ON (A.KEY1= B.KEY2)
SELECT * FROM TAB1 A LEFT OUTER JOIN TAB2 B ON (A.KEY1= B.KEY2)
SELECT * FROM TAB1 A FULL OUTER JOIN TAB2 B ON (A.KEY1= B.KEY2)
SELECT * FROM TAB1 A CROSS JOIN TAB2 B
SELECT * FROM TAB1 A NATURAL JOIN TAB2 B
1. 2 4 6 8  3
2. 2 5 6 16 4
3. 3 5 6 16 3
4. 3 6 8 12 4
답 : 3번

31. 아래와 같은 테이블 데이터가 있다. 각 SQL에 대한 결과값이 잘못된 것은?(/)
TAB1테이블 N1[1,2,3,4], V1[A, _, B, C]
TAB2테이블 N1[1,2,3], V1[A, _, B]
1. SELECT * FROM TAB1 WHERE V1 IN (SELECT V1 FROM TAB2);
N1[1, 3], V1[A, B]
2. SELECT * FROM TAB1 WHERE V1 NOT IN (SELECT V1 FROM TAB2);
N1[4], V1[C]
3. SELECT * FROM TAB1 A WHERE EXISTS (SELECT 'X' FROM TAB2 B WHERE A.V1=B.V1);
N1[1, 3], V1[A, B]
4. SELECT * FROM TAB1 A WHERE NOT EXISTS (SELECT 'X' FROM TAB2 B WHERE A.V1=B.V1);
N1[2, 4], V1[_, C]
답 : 2번
해설) NOT으로 전체 거짓이므로 아무것도 출력되지 않는다.

32. 아래와 같은 테이블이 있다. 다음 SQL 실행 결과로 올바른 것은?(/)
EMPLOYEES테이블 EMPNO[1,2,3,4,5,6], DEPTNO[NULL,10,20,30,40,50],
HIREDATE[1998/12/23, 2001/05/06, 2020/01/16, 2020/02/01, 2020/02/28, 2023/06/07]
SELECT COUNT(DEPTNO) FROM EMPLOYEES
WHERE DEPTNO <= ALL(SELECT DEPTNO FROM EMPLOYEES
WHERE HIREDATE >= TO_DATE('2020/02', 'YYYY/MMM'));
1. 2
2. 3
3. 4
4. 5
답 : 2번
해설) DEPTNO 30,40,50이니까 10, 20, 30 

33. 다음 SQL 중 정상 수행이 불가한 것은?(/)
1. SELECT * FROM TAB1 A
WHERE NOT EXISTS (SELECT 'X' 
FROM TAB2 B WEHRE A.NO = B.NO);
2. SELECT A.NO, (SELECT B.NAME
FROM TAB2 B) FROM TAB1 A WHERE A.NO = B.NO;
3. SELECT A.NO FROM TAB1 A JOIN TAB2 B USING (NO);
4. UPDATE TAB1 A SET A.NAME = (SELECT B.NAME
FROM TAB2 B WHERE A.NO = B.NO);
답 : 2번

34. 아래의 SQL의 출력 결과 중 알맞은 것은?(/)
TAB1테이블 COL1[A,B,C], COL2[10,20,30]
TAB2테이블 COL1[B,C,D], COL2[20,30,40]
SELECT COUNT(*) FROM TAB1
WHERE EXISTS(SELECT 1 FROM TAB2
WHERE TAB2.COL1 = 'A');
1. NULL
2. 0
3. 1
4. 3
답 : 2번

35. 다음 ERD를 보고, 고객의 성별로 서비스 이용횟수와 이용금액의 총합을 출력하는 SQL로 적절하지 않은 것은?
고객테이블[고객번호(PK), 이름, 성별, 전화번호]
서비스 구매 테이블[고객번호(FK), 서비스번호(FK), 이용날짜]
서비스 테이블[서비스 번호(PK), 서비스명, 가격]
1. SELECT 고객.성별, COUNT(서비스.서비스번호)AS CNT, SUM(서비스.가격) AS SUM_PRICE
FROM 고객, 서비스구매, 서비스 WHERE 고객.고객번호 = 서비스구매.고객번호
AND 서비스 구매.서비스번호 = 서비스.서비스번호 GROUP BY 고객.성별;
2. SELECT 고객.성별, COUNT(고객.고객번호)AS CNT, SUM(서비스.가격) AS SUM_PRICE
FROM 고객 LEFT OUTER JOIN 서비스구매 ON 고객.고객번호 = 서비스구매.고객번호
LEFT OUTER JONI 서비스 ON 서비스구매.서비스번호 = 서비스.서비스번호 GROUP BY 고객.성별;
3. SELECT 고객.성별, COUNT(I.SNO)AS CNT, SUM(I.가격) AS SUM_PRICE
FROM 고객 INNER JOIN (SELECT 서비스구매.고객번호 AS GNO, 서비스.서비스번호 AS SNO,
서비스.가격 FROM 서비스구매 INNER JOIN 서비스 ON 서비스구매.서비스번호 = 서비스.서비스번호) 
ON 고객.고객번호 = I.GNO GROUP BY 고객.성별;
4. SELECT 고객.성별, COUNT((SELECT 서비스번호 FROM 서비스
WHERE 서비스구매.서비스번호 = 서비스.서비스번호)) AS CNT,
SUM((SELECT 가격 FROM 서비스 WHERE 서비스구매.서비스 번호
 = 서비스.서비스번호))AS SUM_PRICE FROM 고객
INNER JOIN 서비스 구매 ON 고객.고객번호 = 서비스구매.고객번호 GROUP BY 고객.성별;
답 : 2번

36. (/)
답 : 1번
해설)DEPTNO, DEPARTMENT_ID의 데이터타입이 맞지 않음 

37. (/)
답 : 3번
해설) ROLLUP, GROUPING SETS, CUBE를 확인한다.

38.(/)
답 : 3번
해설)일자는 RANGE가 DEFAULT이다 1/2에 1000, 2000이다
주문금액으로는 1000 , 4000, 4000으로 미리 계산이 된다.

39.(/)
답 : 4번
해설)FIRST_VALUE는 파티션 내의 첫번째 값이니까 홍길동, 김길동
LAST_VALUE는 파티션 내의 마지막 값이니까 항상 자기 자신이 나오니까 그대로

40.(/)
답 : 4번
해설)ORDER BY가 마지막 순서이기 때문에 ROWNUM이 먼저 수행된다.

41.
답 : 1번

42.
답 : 2번
해설) EXTRACT(MONTH FROM 입사일자) >=7은 입사일자가 7월 이후인 
대상자만 출력하기 때문에 박전무는 제외된다. 김전무 LEVEL2
다음 10002번 매니저사원번호 홍상무, 김상무가 LEVEL3
다음 10003, 10004번 매니저사원번호 홍사원, 최사원 LEVEL4
다음 10008번 매니저사원번호 강인턴 LEVEL5
그리고 ORDER SIBLINGS BY 이름;이니까 같은 LEVEL일때 정렬을 
이름순으로 하겠다라는 의미이니
나사장 - 김전무 - 김상무 - 최사원 - 강인턴 - 홍상무 - 홍사원

43.
답 : 1번

44.
답 : 2번
'/w{2}+'은 숫자 2회 이상이므로
2, 3

45.
답 : 4번
'[XY-]+Z?'은 X,Y,-중에 하나라도 있으면 되고 Z는 있어도 되고 없어도 된다.

46.
답 : 3번
해설)

47.
답 : 2번

48.
답 : 4번

49.
답 : 4번
해설) NUMBER(5,2) -> xxx.xx OR xx.xxx이다. 
VARCHAR은 숫자도 가능

50.
답 : 2번





















