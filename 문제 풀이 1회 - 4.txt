41. EMP 테이블의 급여합계에 대해서 결합 가능한 모든 조건의 합계를 계산하는 것은?
1. GROUP  BY DEPTNO, JOB
2. GROUPING SETS(DEPTNO, JOB)
3. ROLLUP(DEPTNO, JOB)
4. CUBE(DEPTNO, JOB)
답 : 4번
해설) CUBE는 CUBE 함수에 제시한 컬럼에 대해서 결합 가능한 모든 집계를 계산한다.
즉, 다차원 집계를 제공하여 다양하게 데이터를 분석할 수 있게 한다.
예를 들어 부서와 직업을 CUBE로 사용하면 부서별 합계, 직업별 합계, 부서별 직업별 합계, 전체 합계가 조회되는 것이다.

42. 다음 보기의 SQL을 실행하면 총 12개의 행이 조회된다. (  )에 올바른 것은?
MytestA 테이블 COL1 [1, 2, 3, 4], COL2 [A1, ___, B1, C1]
MytestB 테이블 COL1 [1, 2, 3], COL2 [A1, ___, B1]
SQL문 SELECT * FROM MytestA (    ) MytestB;
1. INNER JOIN
2. LEFT OUTER JOIN
3. CROSS JOIN
4. RIGHT OUTER JOIN
답 : 3번
해설) 1, 2, 4번 JOIN들은 ON이라는 조건이 있어야 한다.

43. 다음은 ORACLE 데이터베이스에서 사용하는 OUTER JOIN의 예제이다. 빈칸을 채워 ORACLE의 OUTER JOIN을 표준 ANSL SQL로 변경하시오.
[ORACLE OUTER JOIN]
SELECT *
FROM EMP.DEPT
WHERE EMP.부서코드(+) = DEPT.부서코드;
[ANSI JOIN]
SELECT  *
FROM EMP (   ) DEPT
ON(EMP.부서코드 = DEPT.부서코드)
1. FULL OUTER JOIN
2. LEFT OUTER JOIN
3. RIGHT OUTER JOIN
4. CROSS JOIN
답 : 3번
해설)
ORACLE OUTER JOIN에서 (+)가 왼쪽 테이블 옆에 위치해 있으므로
우측 테이블에서는 조인을 수행하지않는 테이블의 행들은 그대로 유지되며,
좌측 테이블에서는 조인을 수행하지 않는 테이블의 행들은 NULL값으로 추가되는
RIGHT OUTER JOIN이 수행된다

44. 다음은 ORACLE 데이터베이스에서 사용하는 OUTER JOIN의 예제이다. 빈칸을 채워 ORACLE OUTER JOIN을 표준 ANSI SQL로 변경하시오.
[ORACLE OUTER JOIN]
SELECT *
FROM EMP.DEPT
WHERE EMP.부서코드 = DEPT.부서코드(+)
AND DEPT.부서명(+) = '보안팀' AND 급여 > 4000
[ANSI JOIN]
SELECT *
FROM EMP (   ) DEPT
ON (EMP.부서코드 = DEPT.부서코드
AND DEPT.부서명(+) = '보안팀') 
WHERE 1=1 AND 급여 > 4000;
1. FULL OUTER JOIN
2. LEFT OUTER JOIN
3. RIGHT OUTER JOIN
4. CROSS JOIN
답 : 2번

45. 다음 보기에서 설명하고 있는 데이터베이스 키의 종류는 무엇인가?
데이터베이스 키의 종류 중에서 유일성과 최소성을 만족한다.
1. 인조키
2. 수퍼키
3. 후보키
4. 외래키
답 : 3번
해설) 
기본키 : 후보키 중에서 엔터티를 대표할 수 있는 키
후보키 : 유일성과 최소성을 만족하는 키
수퍼키 : 유일성은 만족하지만 최소성(컬럼조합개수)을 만족하지 않는 키이다.(유일하게 식별할 수 있는 모든 조합)
외래키 : 하나 혹은 다수의 다른 테이블의 기본키 필드를 가리키는 것으로 참조 무결성을 확인하기 위해서 사용되는 키

46. 다음 보기의 SQL문을 실행했을 때의 결과값은?
Mytest 테이블 NO[001, NULL, 003, 004, NULL], SCORE[150, 250, 50, 150, 600]
SQL문 SELECT SUM(SCORE) / COUNT(NO) FROM Mytest
1. 100
2. 200
3. 300
4. 400
답 : 4번
해설) NULL은 COUNT하지 않으니 1200 / 3 = 400

47. 다음 SQL의 실행 결과는?
SELECT ROUND(10.51234, 1) FROM DUAL;
1. 10
2. 10.5
3. 10.51
4. 11
답 : 2번
해설) ROUND(숫자, 반올림 소수 자리)는 반올림하는 함수이다.
10.51을 반올림하면 10.5이다

48. 다음과 같은 결과값을 조회하기 위해서 SQL문의 (   )에 알맞은 것을 넣으시오.
Mytest 테이블 ENAME[유비, 관우, 장비, 재갈량, 조운, 황충], SAL[1000, 1100, 1200, 1300, 1400, 1500]
결과 ENAME[유비, 관우, 장비, 재갈량, 조운, 황충], SAL[1000, 1100, 1200, 1300, 1400, 1500], CNT[2, 2, 2, 2, 2, 1]
SQL문 
SELELCT ENAME, SAL, (   ) AS CNT FROM Mytest;
1. MAX(SAL) OVER (ORDER BY SAL
RANGE BETWEEN 50 PRECEDING AND
100 FOLLOWING
2. COUNT(*) OVER (ORDER BY SAL
RANGE BETWEEN 50 PRECEDING AND
100 FOLLOWING)
3. COUNT(*) OVER (ORDER BY SAL
RANGE BETWEEN 100 PRECEDING AND
50 FOLLOWING)
4. COUNT(*) OVER (ORDER BY CNT
RANGE BETWEEN 50 PRECEDING AND
100 FOLLOWING)
답 : 2번
해설) 위의 테이블에서 결과값과 같이 반환되도록 'SAL' 속성을 기준으로
정렬을 수행하고 각각의 행에서의 SAL 속성값을 기준으로 -50에서 +100 
범위 사이에 포함되는 SAL값을 가지는 모든 행의 수를 COUNT하여 CNT
속성값으로 조회한다(RANGE는 현재 행의 데이터 값을 기준으로 앞뒤
데이터 값의 범위를 표시하는 것)

49. 다음에서 설명하기 있는 식별자는?
데이터베이스 키는 생성 여부에 따라 ( A ) 식별자와 ( B ) 식별자로 분류된다.
( A ) 식별자는 엔터티 스스로 생성되는 식별자이고 ( B ) 식별자는 다른 엔터티 간의 
관계에 의해서 만들어지는 식별자이다.
1. A : 기본키, B : 대체키
2. A : 외부 식별자, B : 내부 식별자
3. A : 내부 식별자, B : 외부 식별자
4. A : 인조 식별자, B : 본질 식별자
답 : 3번
해설)
내부 식별자 : 엔터티 내부에서 스스로 생성되는 식별자
예를 들어 부서코드, 주문번호, 종목코드 등이 있다.
외부 식별자 : 다른 엔터티의 관계로 인하여 만들어지는 식별자
예를 들어 계좌 엔터티에 회원 ID이다.

50. 다음에 주어진 두 개의 테이블에 대해서 "SQL1"의 실행 결과와 동일한 "SQL2"문을 완성하시오.
MytestA 테이블 COL1[1, 2, 3, 4], COL2[200, 310, 400, 500]
MytestB 테이블 COL1[1, 2, 3, 4], COL2[200, 350, 400, 550], COL3[1000, 2000, 3000, 4000]
SQL1문
SELECT *
FROM MytestA a
WHERE(a.col1, a.col2)
IN (SELECT b.col1, b.col2 FROM MytestB b
WHERE b.col3 > 1400);
SQL2문
SELECT *
FROM MytestA a
WHERE EXISTS (   );
1. SELECT 1 FROM MytestB b
WHERE a.col1=b.col1 AND
a.col2=b.col2 AND b.col3 > 1400
2. SELECT 1 FROM MytestB b
WHERE a.col1=b.col1 AND
a.col2=b.col2 AND b.col3 < 1400
3. SELECT 1 FROM MytestB b
WHERE a.col1=b.col1 AND
a.col2=b.col2 AND b.col1 > 1400
4. SELECT 1 FROM MytestB b
WHERE a.col1=b.col1 AND
a.col2=b.col2 AND b.col1 < 1400
답 : 1번
해설)
EXISTS 구문의 뒤의 조건에 일치하는 경우 해당 a 테이블의 행을 출력한다.
MytestA와 MytestB에서 같은 COL1, COL2 값을 가지는 행으로 MytestB에서
1, 3번째 행이 선택되고 그 중에서 COL3 속성값이 1400보다 큰 값을 가지는
행을 찾는다. EXISTS 뒤에서 SELECT 1 ...이 부분은 별 의미가 없이 문법을
지키기 위해 사용한 것이다. EXISTS(SELECT * ...또는 SELECT X'등도 사용 가능









