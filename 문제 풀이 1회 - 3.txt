31. 다음 중 파티션에 대한 설명으로 올바르지 않은 것은?
1. RANK() OVER (PPARTITION BY JOB ORDER BY SAL ASC) JOB_RANK
 : 각 JOB 별 SAL이 낮은 순서대로 순위가 부여된다.
2. SUM(SAL) OVER(PARTITION BY MGR ORDER BY SAL RANGE UNBOUNDED PRECEDING)
 : 각 MGR별 현재 행부터 파티션 내 첫번째 행까지의 SAL의 합계를 계산한다.
3. COUNT(*) OVER(ORDER BY SAL) RANGE BETWEEN 10 PRECEDING AND 150 FOLLOWING)
 : SAL을 기준으로 현재 행에서의 SAL의 -10에서 +150 사이의 급여를 가지는 행의 수를 계산한다.
4. AVG(SAL) OVER (PARTITION BY MGR ORDER BY TODAY ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
 : 각 MGR 별로 앞의 한 건, 현재 행, 뒤의 한 건 사이에서 SAL의 평균을 계산한다.
답 : 4번
해설) 4번 보기는 각 MGR 별로 SAL의 평균을 계산하기 전에 TODAY를 기준으로 정렬을 수행한 다음에 
SAL의 평균을 계산한다. 즉, 각 MGR별 TODAY 기준으로 정렬하였을 때 파티션 내에서 앞의 한 건, 
핸재 행, 뒤의 한 건 사이의 급여의 평균을 계산한다.

32. 다음에서 주어진 Mytest 테이블에서 SQL문을 실행했을 때 결괏값과 같은 SQL문은?(단 UNION은 정렬도 진행하는 것으로 한다)
Mytest 테이블 JOB_ID [ manager, manager, manager, helper, helper, helper ], SALARY [1300, 1500, 1900, 1000, 1500, 2500]
결과 JOB_ID [helper, helper, manager, manager], SALARY [1000, 2500, 1300, 1900]
1. SELECT *
FROM (SELECT JOB_ID, MAX(SALARY) 
FROM Mytest 
GROUP BY JOB_ID UNION
SELECT JOB_ID, MIN(SALARY) 
FROM Mytest
GROUP BY JOB_ID);
2. SELECT *
FROM (SELECT JOB_ID, MAX(SALARY) 
FROM Mytest 
GROUP BY SALARY UNION
SELECT JOB_ID, MIN(SALARY) 
FROM Mytest
GROUP BY SALARY);
3. SELECT *
FROM (SELECT JOB_ID, MAX(SALARY) 
FROM Mytest 
GROUP BY JOB_ID UNION ALL
SELECT JOB_ID, MIN(SALARY) 
FROM Mytest
GROUP BY JOB_ID);
4. SELECT *
FROM (SELECT JOB_ID, MAX(SALARY) 
FROM Mytest 
GROUP BY SALARY UNION ALL
SELECT JOB_ID, MIN(SALARY) 
FROM Mytest
GROUP BY SALARY);
답 : 1번
해설) UNION ALL은 중복제거 안하고 정렬도 안함

33. 다음 보기의 SQL문을 실행했을 때 결과값이 다른 하나는?
Mytest 테이블 COL1 [NULL, 0, NULL, 0, NULL]
1. SELECT CASE A.COL1 WHEN NULL THEN -1 ELSE 0
END AS DATA FROM Mytest A;
2. SELECT CASE WHEN A.COL1 IS NULL THEN -1 ELSE 0
END AS DATA FROM Mytest A;
3. SELECT DECODE(A.COL1, NULL, -1, A.col1)
AS DATA FROM Mytest A;
4. SELECT NVL(A.col1, -1)
AS DATA FROM Mytest A;
답 : 1
해설) CASE문법
[SIMPLE CASE] CASE 컬럼 WHEN 비교 THEN 'A'..은 CASE WHEN 컬럼 = 비교 THEN 'A'..와 같음
[SEARCHED CASE] CASE WHEN 컬럼 = 비교 THEN 'A'..
= 외에 다른 비교도 가능
NULL은 산술 비교 연산이 불가능하다.
1번은 NULL과 산술 비교 연산이 불가하므로 THEN으로 빠지지 않고 ELSE로 빠져 모두 0으로 나온다. COL1[0,0,0,0,0]
2번은 SEARCHED CASE이니까 A.COL1 IS NULL을 보면 THEN -1이 된다. COL1[-1,0,-1,0,-1]
3번은 DECODE니까 A.COL1이 NULL이면 -1리턴 COL1[-1,0,-1,0,-1]
4번 NVL이니까 A.COL1이 NULL이면 -1리턴 COL1[-1,0,-1,0,-1]

34. 다음 보기의 결과값과 동일하게 반환하는 SLQ문은?
답 : 4번
SELECT *
FROM Mytest 
WHERE 회원번호 =103
ORDER BY 주문금액 DESC

35. 다음의 Mytest 테이블에 데이터를 입력 시 에러가 발생하는 것은?
Mytest
CREATE TABLE Mytest
(
A NUMBER(10) PRIMARY KEY,
B NUMBER(10),
C DATE,
D VARCHAR2(10)
);
1. INSERT INTO Mytest VALUES(1, 12, SYSDATE, 002)
2. INSERT INTO Mytest VALUES(2, 1111, TO_DATE('20240101', 'YYYYMMDD'), '003')
3. INSERT INTO Mytest VALUES(3, 200, SYSDATE-10, '004')
4. INSERT INTO Mytest VALUES(4, 32, 20240101, '004')
답 : 4번
해설) 
1번 002는 자동으로 형변환이 되어 TO_CHAR(002)로 인해 D 칼럼에 '002'로 들어간다.
2번은 권장형
3번 각 문자항에 잘 들어감. SYSDATE-10은 10일 전 날짜를 의미
4번 숫자형 값을 바로 DATE에 넣어 데이터타입 불일치 에러 발생 TO_DATE(20240101)로 변경해야함

36. 다음의 SQL문이 반환하는 결과값은?
Mytest 테이블 COL1 [1, 2, 2], COL2 [NULL, 10, 10], COL3 [1, 14, 12]
SELECT *
FROM Mytest 
ORDER BY COL1 DESC, COL2 DESC, COL3 DESC;
1.  COL1 [1, 1, 2], COL2 [NULL, 10, 10], COL3 [1, 12, 14]
2.  COL1 [2, 2, 1], COL2 [NULL, 10, 10], COL3 [14, 12, 1]
3.  COL1 [2, 2, 1], COL2 [10, 10, NULL], COL3 [14, 12, 1]
4.  COL1 [2, 2, 1], COL2 [10, 10, NULL], COL3 [1, 12, 14]
답 : 3번
해설) COL1 먼저 내림차순 해보면 2로 동일한 열이 있으므로
COL2를 내림차순 해보면 10으로 동일한 열이 있으므로
COL3을 내림차순 하면 14 다음 12 이므로 주의해야한다.

37. 다음 보기의 결과값을 얻기 위한 SQL문을 작성하시오.
Mytest 테이블 COL1 [NULL, 0, 10, 11, 13], COL2 [0, NULL, 20, 21, 22], COL3 [30, 0, NULL, 31, 32]
결과 A[13], B[0], C[34]
SELECT
(  ) AS A,
(  ) AS B,
(  ) AS C
FROM Mytest
1. MAX(COL2), MIN(COL2), SUM(COL1)
2. MAX(COL1), MIN(COL2), SUM(COL1)
3. MAX(COL1), MIN(COL2), SUM(COL2)
4. MIN(COL1), MAX(COL2), MAX(COL1)
답 : 2번

38. 아래의 결과값을 보고 SQL문의 빈칸에 들어갈 수 있는 내용을 고르시오.
결과
DEPNO[100, 100, 100, 200, 200, 200, 200, ___]
JOB[증권사, 관리사, ___, 증권사, 데이터분석가, 관리자, ___, ___]
SUM(SAL) [1300, 2400, 3700, 1900, 6000, 2975, 10875, 14575]
SQL문
SELECT DEPNO, JOB, SUM(SAL)
FROM Mytest
GROUP BY (  );
1. DEPNO, JOB
2. GROUPING SETS(DEPNO, JOB)
3. ROLLUP(DEPNO, JOB)
4. CUBE(DEPNO, JOB)
답 : 3번
해설) 주어진 결과값을 보면 
1. DEPNO별 합계
2. DEPNO, JOB별 합계
3. 전체 합계가 조회되므로 빈칸에는 그룹 함수 중 ROLLUP이 와야 한다
이거 SUM(SAL)보면 증권사 값(1300) + 관리자(2400) = 3700임.
총합으로 보면 문제풀이 가능
1번은 데이터만 나온다.
2번은 GROUPING SETS는 (대상1, 대상2)앞에서부터 하나하나 한다. 그러므로 JOB에대한 GROUP BY가 없다.
3번은 ROLLLUP이 뒤에서부터 하나씩 지운다.
4번 CUBE는 모든 경우의 수를 조합해야 함. JOB에 대한 GROUP BY가 없다.

39. 다음의 SQL문을 ANSI 표준 SQL문으로 올바르게 변환한 것은?
SELECT *
FROM SCOTT.EMP A,
SCOTT.DEPT B
WHERE A.DEPTNO = B.DEPTNO
AND B.DNAME = 'SALES';
1. 
SELECT *
FROM SCOTT.EMP A LEFT OUTER JOIN
SCOTT.DEPT B ON (
A.DEPTNO = B.DEPTNO
AND B.DNAME = 'SALES');
2.
SELECT *
FROM SCOTT.EMP A RIGHT OUTER JOIN
SCOTT.DEPT B ON(
A.DEPTNO = B.DEPTNO
AND B.DNAME = 'SALES');
3.
SELECT *
FROM SCOTT.EMP A CROSS JOIN
SCOTT.DEPT B ON
A.DEPTNO = B.DEPTNO
AND B.DNAME = 'SALES');
4.
SELECT *
FROM SCOTT.EMP A INNER JOIN 
SCOTT.DEPT B ON
A.DEPTNO = B.DEPTNO WHERE 1=1
AND B.DNAME = 'SALES';
답 : 4번
해설)
WHERE절에 (+)가 있으면 OUTER JOIN 없으면 INNER JOIN
ON 뒤에 조건을 준다. 
일반조건들은 WHERE로 작성한다.
1=1은 참이라는 의미이다.

40. 아래와 같은 두 개의 테이블이 있을 때 아래의 SQL 결과 건수를 알맞게 나열한 것은?
MytestA 테이블 COL1 [관우, 유비, 조자룡, 동탁], COL2 [100, 200, 300, 400], KEY1 [B, C, D, E]
MytestB 테이블 KEY2 [A, B, C], COL2 [100, 200, 300], COL3 [조조, 관우, 유비]
SQL문
SELECT *
FROM MytestA A INNER JOIN MytestB
ON (A.KEY1 = B.KEY2);
SELECT *
FROM MytestA A LEFT OUTER JOIN MytestB
ON (A.KEY1 = B.KEY2);
SELECT *
FROM MytestA A RIGHT OUTER JOIN MytestB
ON (A.KEY1 = B.KEY2);
SELECT *
FROM MytestA A FULL OUTER JOIN MytestB
ON (A.KEY1 = B.KEY2);
SELECT *
FROM MytestA A CROSS JOIN MytestB B;
1. 2, 4, 3, 5, 12
2. 2, 4, 5, 8, 12
3. 2, 3, 4, 5, 12
4. 2, 4, 3, 7, 12
답 : 1번
해설)
INNER JOIN은 A * B이므로 A.KEY1 = B.KEY2는 B, C 2개이다.
LEFT OUTER JOIN은 A가 기준으로 JOIN에 실패한 것도 포함이 되므로 B, C, D, E 4개이다.
RIGHT OUTER JOIN은 B가 기준으로 JOIN에 실패한 것도 포함이 되므로 A, B, C 3개이다.
FULL OUTER JOIN은 A, B가 기준으로 JOIN에 실패한 것도 포함이 되므로 A, B, C, D, E 5개이다.
CROSS JOIN은 카티션 조인과 같다. A * B = 12개이다.



