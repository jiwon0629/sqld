41. 다음의 주어진 테이블에서 아래의 SQL문을 수행하였을 때의 결과가
RESULT와 같을 때 SQL문의 ( ㄱ )에 들어갈 것은?
Mytest 테이블 COL1[AAA, BBB, CCC, DDD, EEE, FFF, GGG, HHH, III, JJJ]
RESULT 테이블 VAL[1,2,3,4], CNT[3,3,2,2]
SQL문
SELECT VAL, COUNT(*) AS CNT
FROM( SELELCT ( ㄱ )(4) OVER (ORDER BY
COL1) AS VAL FROM Mytest)
WHERE 1 = 1 GROUP BY VAL ORDER BY 1; 
1. NTILE
2. LEAD
3. RANK
4. LAG
답 : 1번
해설) NTILE함수는 EXPR에 명시된 값만큼 파티션을 
균등하게 분할하는 함수로 EXPR에 명시된 숫자가 4이고
ORDER BY가 1이니 오름차순 정렬로 총 4개의 VAL
속성값으로 파티션이 분할되며 각 파티션별로 행의 수가
균등하게 분할되어 3, 3, 2, 2의 행의 수로 각각 분할된다.
NTILE(5)면 균일하게 데이터를 2개씩 5개로 나눠지게 한다.

42. 다음은 ORACLE 데이터베이스의 계층형 질의에 대한 것이다.
올바르지 않은 것은 ?
1. START WITH절은 계층 구조의 시작점을 지정하는 구문이다.
2. ORDER SIBLINGS BY구는 형제 노드 사이에 정렬을 수행한다.
3. 순방향 전개란 부모 노드로부터 자식 노드로 전개하는 것이고
역방향 전개는 자식 노드에서 부모 노드로 전개하는 것이다.
4. 루트 노드의 LEVEL 값은 1이 아니다.
답 : 4번
해설) ORCLE 계층형 질의에서 루트 노드의 LEVEL값은 1이다.

43. Mytest테이블에 대해서 SQL문을 실행했을 때 결과로 올바른 것은?
Mytest테이블 EMPID[1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007]
NAME[조, 유, 관, 조, 여, 동, 사, 순]
TODAY[2017-01-01, 2017-01-01, 2020-01-01, 2020-01-01, 2020-01-01, 2022-01-01, 2022-01-01, 2022-01-01]
MGRID[NULL, 1000, 1000, 1000, NULL, 1004, 1004, 1004]
SQL문
SELECT *
FROM Mytest
START WITH MGRID IS NULL
CONNECT BY PRIOR EMPID = MGRID
AND today BETWEEN '2017-01-01' AND
'2022-12-31'
ORDER SIBLINGS BY EMPID;
1. Mytest테이블 EMPID[1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007]
NAME[조, 유, 관, 조, 여, 동, 사, 순]
TODAY[2017-01-01, 2017-01-01, 2020-01-01, 2020-01-01, 2020-01-01, 2022-01-01, 2022-01-01, 2022-01-01]
MGRID[NULL, 1000, 1000, 1000, NULL, 1004, 1004, 1004]
2. 
3. 
4. 
답 : 1번
해설)
MGRID가 NULL인 부분으로 전개할 때 EMPID = MGRID인 기준으로 한다.
1000과 1004가 기준이 된다. 그리고 날짜를 비교하는데 전체가 기준이 되고
SIBLINGS를 해서 정렬을 하지만 이미 정렬이 되어 있기 때문에 표 전체가 답이다.

44. 다음의 SQL문을 실행했을 때 아래 결과가 조회되도록 ㄱ,ㄴ에 들어갈 숫자를 고르시오
SQL문
SELECT COL1, COL2, COL3, 
LEAD(COL3, ㄱ, ㄴ) OVER (PARTITION BY
COL1 ORDER BY COL3) AS RESULT FROM Mytest
결과
COL1[LI, LI, LI, K, K, K, P, P, P, L, L]
COL2[가, 가, 다, 가, 나, 나, 다, 나, 다, 라, 라]
COL3[1,5,10,20,30,100,50,100,1000,1200,1400]
RESULT[10,9,9,100,9,9,1000,9,9,9,9]
1. 2, 9 
2. 2, 4
3. 1, 9
4.1, 4
답 : 1번
해설) LEAD (찾을 컬럼위치, 오프셋, 디폴트값)
LEAD는 내 기준 행의 다음 컬럼을 확인하는 것이다. 
찾을 위치는 기준이 되는 컬럼이 되고
오프셋은 기본 1로 설정되어 있지만 2로 할 경우
내 기준 다음다음의 행을 확인한다. 디폴트값은 
파티션이 넘어가면 모두 NULL로 처리되는데 그 경우
숫자를 지정하면 NULL대신 숫자로 입력된다.
 
45. 다음 SQL문을 실행하여 나오는 결과의 빈칸 ㄱ, ㄴ을 작성하시오.
Mytest 테이블 COL1[A, A, A, B, B, B, C]
COL2[가, 가, 다, 가, 나, 나, 다]
COL3[100, 500, 1000, 2000, 3000, 10000, 5000]
SQL문
SELECT NTILE2, COUNT(*) AS CNT
FROM( SELECT COL1, COL2, COL3, NTILE(3)
OVER(ORDER BY COL3) AS NTILE2 FROM Mytest)
GROUP BY NTILE2;
결과
NTILE2[ㄱ, 2, 3]
CNT[ㄴ, 2, 2]
1. 3, 1
2. 2, 3
3. 1, 3
4. 3, 2
답 : 3번
해설) ORDER BY(COL3)를 하면 
COL1[A, A, A, B, B, C, B]
COL2[가, 가, 다, 가, 나, 다, 나]
COL3[100, 500, 1000, 2000, 3000, 50000, 10000]
으로 정렬된다.
NTILE2[1,1,1,2,2,3,3]

46. 다음 SLQ문의 실행 결과는?
SQL문
SELELCT COALESCE(nullif(1,1), 200, 300) as data from dual;
1. 100
2. 200
3. 300
4. 400
답 : 2번
해설) nullif(a,b)는 a=b면 null을 반환하고 아니면 a를 반환한다.
COALESCE는(A,B,C)는 NULL이 아닌 데이터 출력이다.
A가 NULL이면 B출력, B가 NULL이면 C출력

47. 날짜값을 2020, 02와 같이 조회되도록 SQL문을 완성하시오.
Mytest 테이블 COL1[2020-2-1]
SQL문
SELECT EXTRACT
(YEAR FROM SYSDATE),
LPAD(EXTRACT(month from sysdate), ㄱ, ㄴ)
FROM Mytest;
1. 1, '0'
2. 1, '2'
3. 2, '2'
4. 2, '0'
답 : 4번
해설) EXTRACT는 날짜를 받아서 YEAR나 DAY나 MONTH를 받아서 숫자형으로 반환해준다.
EXTRACT(YEAR FROM SYSDATE)는 2020이 나온다.
LPAD는 L : LEFT, PAD : PADDING이란 의미이다. 즉, 3이라는 숫자가 있을 때
003으로 하고 싶을 때 사용한다.
LPAD(사용할 숫자, 자릿수, 대체할 무언가)

48. DEPT 테이블에는 총 4개의 데이터가 있다. 다음의 SQL문을 
실행하면 총 몇 개의 행이 조회되는가?
SQL문 
SELECT * FROM DEPT CROSS JOIN DEPT;
1. 4
2. 8
3. 12
4. 16
답 : 4번

49. 다음의 SQL문을 실행한 결과를 쓰시오.
Mytest 테이블 COL1[A, A, A, B, B, B, C]
COL2[가, 가, 다, 가, 나, 나, 다]
COL3[100, 500, 1000, 2000, 3000, 10000, 5000]
SQL문
SELECT SUM(CASE WHEN COL1 ='A'
THEN 1 END) AS SUM1,
SUM(CASE WHEN COL3 < 20000 THEN 1 END)
AS SUM2 FROM Mytest;
1. 1, 5
2. 2, 6
3. 3, 7
4. 4, 8
답 : 3번

50. 다음 주어진 SQL문의 빈칸에 그룹 함수를 쓰시오.
Mytest 테이블 COL1[A, A, A, B, B, B, C]
COL2[가, 가, 다, 가, 나, 나, 다]
COL3[100, 500, 1000, 2000, 3000, 10000, 5000]
SQL문
SELECT COL1, COL2, COL3 SUM(COL3)
FROM Mytest 
GROUP BY (   );
결과
COL1[A, A, A, B, B, B, C, C]
COL2[가, 다, __, 가, 나, __, 다, __]
COL3[600, 1000, 1600, 2000, 13000, 15000, 5000, 5000]
1. GROUPING SETS(COL1, (COL1, COL2))
2. GROUPING SETS(COL1, (COL2, COL3))
3. GROUPING SETS(COL1, COL2, COL3)
4. GROUPING SETS(COL1, (COL2, COL1))
답 : 1번
해설) 일단 GOUP BY COL1, COL2를 한 걸 알 수 있다
그리고 GROUP BY COL1을 한 걸 알 수 있다.


